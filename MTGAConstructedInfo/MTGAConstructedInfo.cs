/*
 *
 *  Very basic implementation to parse the output_log.txt file generated by the MTG Arena application to get constructed ranked info and drop it into a file.
 *  The intended use is for twitch streamers to be able to.
 *  This will continue to work as long as the file at "<your windows user path>/AppData/LocalLow/Wizards Of The Coast/MTGA/output_log.txt
 *  stays the same.  If wizards decides to change they way they report the rank info, this program will break, so keep an eye on that!
 *  
 *  After running the program, the file can be linked with a text reader on OBS and is located at <your windows user path>/AppData/LocalLow/MTGARankInfo/MTGAContructedInfo\MTGAConstructedRankInfo.txt
 *
 *  Updates immediately when ran and then once every 35 seconds.
 *  
 *  How to generate executable: go to project directory in command line or use VS package manager console & run "dotnet publish -c Release -r win10-x64 --self-contained"
 *  
 *  Author:  Trevor Panhorst (Atromere)
 *  Publish Date: 04/12/2018
 *  Twitch: http://twitch.tv/Atromere
 *  Twitter: http://twitter.com/Atromere
 *  Facebook: http://facebook.com/Atromere
 *  
 *  I stream MTG Arena and other games :)
 * 
 * 
 * 
 */

using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;

namespace MTGAContructedInfo
{
    class MTGAConstructedInfo
    {
        static void Main(string[] args)
        {
            // Set up paths
            var fileLines = new List<string>();
            var userFolder = Directory.GetParent(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)).FullName + "/LocalLow/";
            if (Environment.OSVersion.Version.Major >= 6)
            {
                userFolder = Directory.GetParent(userFolder).ToString();
            }
            var mtgaLogPath = userFolder + "\\Wizards Of The Coast\\MTGA\\output_log.txt";
            var appDir = userFolder + "\\MTGAContructedInfo\\";
            var appPath = appDir + "MTGAConstructedRankInfo.txt";
             // Attempted to use File.ReadAllLines, but it throws an error while MTGA is active due to the file being in use.  
             // So iterating over each line is the work-around.
            while (true)
            {

                try
                {
                    using (var fileStream = File.Open(mtgaLogPath, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite))
                    {
                        using (var streamReader = new StreamReader(fileStream, Encoding.UTF8, true))
                        {
                            string line;
                            while ((line = streamReader.ReadLine()) != null)
                            {
                                fileLines.Add(line);
                            }
                        }

                        // this assumes a specific structure in the log file, so if they change that this will probably break :)
                        var rankInfoJson = GetRankInfo("{", fileLines) + "}";
                        CombinedRankInfo combinedRankInfo = new CombinedRankInfo(rankInfoJson);
                        Constructed constructedRank = combinedRankInfo.constructed;
                        decimal winsPlusLosses = constructedRank.wins + constructedRank.losses;
                        decimal wlRatio = Math.Round((constructedRank.wins / (winsPlusLosses) * 100), 2);

                        if (!Directory.Exists(appDir))
                        {
                            Directory.CreateDirectory(appDir);
                        }

                        using (FileStream fs = File.Create(appPath))
                        {
                            string rank;
                            string streak;
                            int streakAbs =  Math.Abs((int)constructedRank.streak);
                            //No point in showing progress for Master tier since it is always Master 1 (0% progress)
                            if (constructedRank.@class.Contains("Master"))
                            {
                                rank = constructedRank.@class + "\n";
                            }
                            else
                            {
                                rank = constructedRank.@class + " " + constructedRank.tier + " (" + constructedRank.progress + "% progress) \n";
                            }
                            if(constructedRank.streak == 1)
                            {
                                streak = streakAbs + " win";
                            } else if(constructedRank.streak == -1)
                            {
                                streak = streakAbs + " loss";
                            }
                            else if (constructedRank.streak < -1 )
                            {
                                streak = streakAbs + " losses";
                            } else
                            {
                                streak = streakAbs + " wins";
                            }
                            var rankInfo =
                                    "MTG Arena Rank Info \n" +
                                    "Rank: " + rank +
                                    "Wins: " + constructedRank.wins + " \n" +
                                    "Losses: " + constructedRank.losses + " \n" +
                                    "W/L: " + wlRatio + "% \n" +
                                    "Streak: " + streak;
                            Byte[] info = new UTF8Encoding(true).GetBytes(rankInfo);
                            fs.Write(info, 0, info.Length);
                            Console.Clear();
                            Console.WriteLine(DateTime.Now.ToString() + "\n\n" + rankInfo + "\n\nYou can add the file \n("+ appPath+")\nto OBS (or other stream software) as a text source to display on your stream :)\n\nThis will update every 35 seconds!");
                        }
                    }
                } catch(Exception ex)
                {
                    Debug.WriteLine(ex.ToString());
                }
                System.Threading.Thread.Sleep(35000);
            }
        }

        public static string GetRankInfo(string currentJson, List<string> lines)
        {
            try
            {
                var index = lines.FindLastIndex(g => g.Contains("Event.GetCombinedRankInfo {"));
                if(lines[index+1].Contains("constructed"))
                {
                    for(var i = 1; i < 11; i++)
                    {
                        if (i == 10)
                        {
                            currentJson += lines[index + i].ToString().Replace(",", "");
                        } else
                        {
                            currentJson += lines[index + i].ToString();
                        }
                    }
                } else
                {
                    lines.RemoveRange(0, index);
                    currentJson = GetRankInfo(currentJson, lines);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.ToString());
            }
            return currentJson;
        }
    }
    public class CombinedRankInfo
    {
        public Constructed constructed;
        public CombinedRankInfo(string rankInfoJson)
        {
            constructed = new Constructed();
            JObject jObject = JObject.Parse(rankInfoJson);
            JToken jConstructed = jObject["constructed"];
            constructed.playerId = (string)jConstructed["playerId"];
            constructed.@class = (string)jConstructed["class"];
            constructed.classHighWaterMark = (string)jConstructed["classHighWaterMark"];
            constructed.tier = (int)jConstructed["tier"];
            constructed.progress = (int)jConstructed["progress"];
            constructed.streak = (int)jConstructed["streak"];
            constructed.wins = (int)jConstructed["wins"];
            constructed.losses = (int)jConstructed["losses"];
        }
    }
    public class Constructed
    {
        public string playerId;
        public string @class;
        public string classHighWaterMark;
        public int tier;
        public int progress;
        public int streak;
        public int wins;
        public int losses;
    }
}
